-- Pedro Henrique de Avila Daroda e Bruno Ardais Staevie

-- 1) É a linguagem usada para estruturação de dados, assim permitindo fazer consultas, manipular os dados e gereciar o banco
-- 2) As restrições estruturais restringem quais dados podem fazer parte do banco, enquanto as funcionais restringem como esses dados podem ser aplicados.

-- 3) 
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

CREATE TABLE IF NOT EXISTS `database_prova`.`Curso` (
    `idCurso` INT NOT NULL AUTO_INCREMENT,
    `nome` VARCHAR(90) NOT NULL,
    `Area` VARCHAR(90) NOT NULL,
    PRIMARY KEY (`idCurso`)
);



CREATE TABLE IF NOT EXISTS `database_prova`.`Professor` (
    `idProfessor` INT NOT NULL AUTO_INCREMENT,
    `nome` VARCHAR(90) NOT NULL,
    `email` VARCHAR(256) NOT NULL,
    `area` VARCHAR(60) NOT NULL,
    `idCurso` INT NOT NULL,
    PRIMARY KEY (`idProfessor`),
    FOREIGN KEY (`idCurso`)
    REFERENCES `database_prova`.`Curso` (`idCurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS `database_prova`.`Instituicao` (
    `idInst` INT NOT NULL AUTO_INCREMENT,
    `nome` VARCHAR(90) NOT NULL,
    `sigla` VARCHAR(90) NOT NULL,
    PRIMARY KEY (`idInst`)
);

CREATE TABLE IF NOT EXISTS `database_prova`.`Projeto` (
    `idProjeto` INT NOT NULL AUTO_INCREMENT,
    `titulo` VARCHAR(90) NOT NULL,
    `resumo` VARCHAR(45) NOT NULL,
    `idResponsavel` INT NOT NULL,
    `idColaborador` INT,
    `idInst` INT NOT NULL,
    PRIMARY KEY (`idProjeto`),
    FOREIGN KEY (`idResponsavel`)
    REFERENCES `database_prova`.`Professor` (`idProfessor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    FOREIGN KEY (`idColaborador`)
    REFERENCES `database_prova`.`Professor` (`idProfessor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    FOREIGN KEY (`idInst`)
    REFERENCES `database_prova`.`Instituicao` (`idInst`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
);

insert into Curso values (1,"Ciência da Computação","Tecnologia");
insert into Curso values (2,"Sistemas de Informação","Tecnologia");
insert into Curso values (3,"Filosofia","Sociais");

insert into Professor values (1,"Alexandre Zamberlan","alexz@ufn.edu.br","Tecnologia",1);
insert into Professor values (2,"Ana Paula","apc@ufn.edu.br","Tecnologia",1);
insert into Professor values (3,"Sylvio Garcia","sylvio@ufn.edu.br","Tecnologia",2);
insert into Professor values (4,"Mirkos Martins","mirkos@ufn.edu.br","Tecnologia",1);

insert into Instituicao values (10,"Universidad Franciscana","UFN");
insert into Instituicao values (20,"Universidade Federal de Santa Maria","UFSM");

insert into Projeto values (1,"Web Crawler","Trabalho do Zamba",1,NULL,10);
insert into Projeto values (2,"SirPerf","Sistema de perfusão",1,3,10);
insert into Projeto values (3,"OdontoTren","Sistema de gestão de atendimento",2,3,20);
insert into Projeto values (4,"Avida","Sistema de acompanhamento psiquiátrico",1,NULL,10);

-- 4) select * from projeto where projeto.idInst = 10;

-- 5) select distinct (professor.nome) 
-- from professor, projeto 
-- where professor.idProfessor not in (select projeto.idResponsavel from projeto);

-- 6) select * from projeto where projeto.idResponsavel = 1;

-- 7) select count(*) from projeto

-- 8) select * from projeto where projeto.idColaborador = NULL;

-- 9) SELECT projeto.titulo FROM projeto JOIN professor ON projeto.idResponsavel = professor.idProfessor WHERE professor.area = 'Tecnologia';


